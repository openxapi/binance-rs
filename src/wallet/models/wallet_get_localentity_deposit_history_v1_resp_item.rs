/*
 * Binance Wallet API
 *
 * OpenAPI specification for Binance exchange - Wallet API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::wallet::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct WalletGetLocalentityDepositHistoryV1RespItem {
    #[serde(rename = "address", skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(rename = "addressTag", skip_serializing_if = "Option::is_none")]
    pub address_tag: Option<String>,
    #[serde(rename = "amount", skip_serializing_if = "Option::is_none")]
    pub amount: Option<String>,
    #[serde(rename = "coin", skip_serializing_if = "Option::is_none")]
    pub coin: Option<String>,
    #[serde(rename = "confirmTimes", skip_serializing_if = "Option::is_none")]
    pub confirm_times: Option<String>,
    #[serde(rename = "depositStatus", skip_serializing_if = "Option::is_none")]
    pub deposit_status: Option<i32>,
    #[serde(rename = "insertTime", skip_serializing_if = "Option::is_none")]
    pub insert_time: Option<i64>,
    #[serde(rename = "network", skip_serializing_if = "Option::is_none")]
    pub network: Option<String>,
    #[serde(rename = "questionnaire", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub questionnaire: Option<Option<serde_json::Value>>,
    #[serde(rename = "requireQuestionnaire", skip_serializing_if = "Option::is_none")]
    pub require_questionnaire: Option<bool>,
    #[serde(rename = "trId", skip_serializing_if = "Option::is_none")]
    pub tr_id: Option<i64>,
    #[serde(rename = "tranId", skip_serializing_if = "Option::is_none")]
    pub tran_id: Option<i64>,
    #[serde(rename = "transferType", skip_serializing_if = "Option::is_none")]
    pub transfer_type: Option<i32>,
    #[serde(rename = "travelRuleStatus", skip_serializing_if = "Option::is_none")]
    pub travel_rule_status: Option<i32>,
    #[serde(rename = "txId", skip_serializing_if = "Option::is_none")]
    pub tx_id: Option<String>,
    #[serde(rename = "unlockConfirm", skip_serializing_if = "Option::is_none")]
    pub unlock_confirm: Option<i32>,
    #[serde(rename = "walletType", skip_serializing_if = "Option::is_none")]
    pub wallet_type: Option<i32>,
}

impl WalletGetLocalentityDepositHistoryV1RespItem {
    pub fn new() -> WalletGetLocalentityDepositHistoryV1RespItem {
        WalletGetLocalentityDepositHistoryV1RespItem {
            address: None,
            address_tag: None,
            amount: None,
            coin: None,
            confirm_times: None,
            deposit_status: None,
            insert_time: None,
            network: None,
            questionnaire: None,
            require_questionnaire: None,
            tr_id: None,
            tran_id: None,
            transfer_type: None,
            travel_rule_status: None,
            tx_id: None,
            unlock_confirm: None,
            wallet_type: None,
        }
    }
}

