/*
 * Binance Sub Account API
 *
 * OpenAPI specification for Binance exchange - Subaccount API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::subaccount::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SubaccountGetSubAccountFuturesPositionRiskV2RespFuturePositionRiskVosInner {
    #[serde(rename = "entryPrice", skip_serializing_if = "Option::is_none")]
    pub entry_price: Option<String>,
    #[serde(rename = "leverage", skip_serializing_if = "Option::is_none")]
    pub leverage: Option<String>,
    #[serde(rename = "liquidationPrice", skip_serializing_if = "Option::is_none")]
    pub liquidation_price: Option<String>,
    #[serde(rename = "markPrice", skip_serializing_if = "Option::is_none")]
    pub mark_price: Option<String>,
    #[serde(rename = "maxNotional", skip_serializing_if = "Option::is_none")]
    pub max_notional: Option<String>,
    #[serde(rename = "positionAmount", skip_serializing_if = "Option::is_none")]
    pub position_amount: Option<String>,
    #[serde(rename = "symbol", skip_serializing_if = "Option::is_none")]
    pub symbol: Option<String>,
    #[serde(rename = "unrealizedProfit", skip_serializing_if = "Option::is_none")]
    pub unrealized_profit: Option<String>,
}

impl SubaccountGetSubAccountFuturesPositionRiskV2RespFuturePositionRiskVosInner {
    pub fn new() -> SubaccountGetSubAccountFuturesPositionRiskV2RespFuturePositionRiskVosInner {
        SubaccountGetSubAccountFuturesPositionRiskV2RespFuturePositionRiskVosInner {
            entry_price: None,
            leverage: None,
            liquidation_price: None,
            mark_price: None,
            max_notional: None,
            position_amount: None,
            symbol: None,
            unrealized_profit: None,
        }
    }
}

