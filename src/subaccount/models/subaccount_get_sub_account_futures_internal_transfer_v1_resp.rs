/*
 * Binance Sub Account API
 *
 * OpenAPI specification for Binance exchange - Subaccount API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::subaccount::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SubaccountGetSubAccountFuturesInternalTransferV1Resp {
    #[serde(rename = "futuresType", skip_serializing_if = "Option::is_none")]
    pub futures_type: Option<i32>,
    #[serde(rename = "success", skip_serializing_if = "Option::is_none")]
    pub success: Option<bool>,
    #[serde(rename = "transfers", skip_serializing_if = "Option::is_none")]
    pub transfers: Option<Vec<models::SubaccountGetSubAccountFuturesInternalTransferV1RespTransfersInner>>,
}

impl SubaccountGetSubAccountFuturesInternalTransferV1Resp {
    pub fn new() -> SubaccountGetSubAccountFuturesInternalTransferV1Resp {
        SubaccountGetSubAccountFuturesInternalTransferV1Resp {
            futures_type: None,
            success: None,
            transfers: None,
        }
    }
}

