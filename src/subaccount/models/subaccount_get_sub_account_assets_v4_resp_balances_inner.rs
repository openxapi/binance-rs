/*
 * Binance Sub Account API
 *
 * OpenAPI specification for Binance exchange - Subaccount API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::subaccount::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SubaccountGetSubAccountAssetsV4RespBalancesInner {
    #[serde(rename = "asset", skip_serializing_if = "Option::is_none")]
    pub asset: Option<String>,
    #[serde(rename = "free", skip_serializing_if = "Option::is_none")]
    pub free: Option<String>,
    #[serde(rename = "freeze", skip_serializing_if = "Option::is_none")]
    pub freeze: Option<String>,
    #[serde(rename = "locked", skip_serializing_if = "Option::is_none")]
    pub locked: Option<String>,
    #[serde(rename = "withdrawing", skip_serializing_if = "Option::is_none")]
    pub withdrawing: Option<String>,
}

impl SubaccountGetSubAccountAssetsV4RespBalancesInner {
    pub fn new() -> SubaccountGetSubAccountAssetsV4RespBalancesInner {
        SubaccountGetSubAccountAssetsV4RespBalancesInner {
            asset: None,
            free: None,
            freeze: None,
            locked: None,
            withdrawing: None,
        }
    }
}

