/*
 * Binance Sub Account API
 *
 * OpenAPI specification for Binance exchange - Subaccount API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::subaccount::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SubaccountGetManagedSubaccountFetchFutureAssetV1RespSnapshotVosInnerDataPositionInner {
    #[serde(rename = "entryPrice", skip_serializing_if = "Option::is_none")]
    pub entry_price: Option<i32>,
    #[serde(rename = "markPrice", skip_serializing_if = "Option::is_none")]
    pub mark_price: Option<i32>,
    #[serde(rename = "positionAmt", skip_serializing_if = "Option::is_none")]
    pub position_amt: Option<f64>,
    #[serde(rename = "symbol", skip_serializing_if = "Option::is_none")]
    pub symbol: Option<String>,
}

impl SubaccountGetManagedSubaccountFetchFutureAssetV1RespSnapshotVosInnerDataPositionInner {
    pub fn new() -> SubaccountGetManagedSubaccountFetchFutureAssetV1RespSnapshotVosInnerDataPositionInner {
        SubaccountGetManagedSubaccountFetchFutureAssetV1RespSnapshotVosInnerDataPositionInner {
            entry_price: None,
            mark_price: None,
            position_amt: None,
            symbol: None,
        }
    }
}

