/*
 * Binance Options API
 *
 * OpenAPI specification for Binance exchange - Options API
 *
 * The version of the OpenAPI document: 0.2.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::options::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetDepthV1Resp {
    #[serde(rename = "T", skip_serializing_if = "Option::is_none")]
    pub t: Option<i32>,
    #[serde(rename = "asks", skip_serializing_if = "Option::is_none")]
    pub asks: Option<Vec<Vec<String>>>,
    #[serde(rename = "bids", skip_serializing_if = "Option::is_none")]
    pub bids: Option<Vec<Vec<String>>>,
    #[serde(rename = "u", skip_serializing_if = "Option::is_none")]
    pub u: Option<i32>,
}

impl GetDepthV1Resp {
    pub fn new() -> GetDepthV1Resp {
        GetDepthV1Resp {
            t: None,
            asks: None,
            bids: None,
            u: None,
        }
    }
}

