/*
 * Binance Options API
 *
 * OpenAPI specification for Binance exchange - Options API
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::options::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetTickerV1RespItem {
    #[serde(rename = "amount", skip_serializing_if = "Option::is_none")]
    pub amount: Option<String>,
    #[serde(rename = "askPrice", skip_serializing_if = "Option::is_none")]
    pub ask_price: Option<String>,
    #[serde(rename = "bidPrice", skip_serializing_if = "Option::is_none")]
    pub bid_price: Option<String>,
    #[serde(rename = "closeTime", skip_serializing_if = "Option::is_none")]
    pub close_time: Option<i64>,
    #[serde(rename = "exercisePrice", skip_serializing_if = "Option::is_none")]
    pub exercise_price: Option<String>,
    #[serde(rename = "firstTradeId", skip_serializing_if = "Option::is_none")]
    pub first_trade_id: Option<i64>,
    #[serde(rename = "high", skip_serializing_if = "Option::is_none")]
    pub high: Option<String>,
    #[serde(rename = "lastPrice", skip_serializing_if = "Option::is_none")]
    pub last_price: Option<String>,
    #[serde(rename = "lastQty", skip_serializing_if = "Option::is_none")]
    pub last_qty: Option<String>,
    #[serde(rename = "low", skip_serializing_if = "Option::is_none")]
    pub low: Option<String>,
    #[serde(rename = "open", skip_serializing_if = "Option::is_none")]
    pub open: Option<String>,
    #[serde(rename = "openTime", skip_serializing_if = "Option::is_none")]
    pub open_time: Option<i64>,
    #[serde(rename = "priceChange", skip_serializing_if = "Option::is_none")]
    pub price_change: Option<String>,
    #[serde(rename = "priceChangePercent", skip_serializing_if = "Option::is_none")]
    pub price_change_percent: Option<String>,
    #[serde(rename = "strikePrice", skip_serializing_if = "Option::is_none")]
    pub strike_price: Option<String>,
    #[serde(rename = "symbol", skip_serializing_if = "Option::is_none")]
    pub symbol: Option<String>,
    #[serde(rename = "tradeCount", skip_serializing_if = "Option::is_none")]
    pub trade_count: Option<i32>,
    #[serde(rename = "volume", skip_serializing_if = "Option::is_none")]
    pub volume: Option<String>,
}

impl GetTickerV1RespItem {
    pub fn new() -> GetTickerV1RespItem {
        GetTickerV1RespItem {
            amount: None,
            ask_price: None,
            bid_price: None,
            close_time: None,
            exercise_price: None,
            first_trade_id: None,
            high: None,
            last_price: None,
            last_qty: None,
            low: None,
            open: None,
            open_time: None,
            price_change: None,
            price_change_percent: None,
            strike_price: None,
            symbol: None,
            trade_count: None,
            volume: None,
        }
    }
}

