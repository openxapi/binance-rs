/*
 * Binance Options API
 *
 * OpenAPI specification for Binance exchange - Options API
 *
 * The version of the OpenAPI document: 0.2.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::options::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetExerciseHistoryV1RespItem {
    #[serde(rename = "expiryDate", skip_serializing_if = "Option::is_none")]
    pub expiry_date: Option<i32>,
    #[serde(rename = "realStrikePrice", skip_serializing_if = "Option::is_none")]
    pub real_strike_price: Option<String>,
    #[serde(rename = "strikePrice", skip_serializing_if = "Option::is_none")]
    pub strike_price: Option<String>,
    #[serde(rename = "strikeResult", skip_serializing_if = "Option::is_none")]
    pub strike_result: Option<String>,
    #[serde(rename = "symbol", skip_serializing_if = "Option::is_none")]
    pub symbol: Option<String>,
}

impl GetExerciseHistoryV1RespItem {
    pub fn new() -> GetExerciseHistoryV1RespItem {
        GetExerciseHistoryV1RespItem {
            expiry_date: None,
            real_strike_price: None,
            strike_price: None,
            strike_result: None,
            symbol: None,
        }
    }
}

