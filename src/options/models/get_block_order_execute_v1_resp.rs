/*
 * Binance Options API
 *
 * OpenAPI specification for Binance exchange - Options API
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::options::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetBlockOrderExecuteV1Resp {
    #[serde(rename = "blockTradeSettlementKey", skip_serializing_if = "Option::is_none")]
    pub block_trade_settlement_key: Option<String>,
    #[serde(rename = "createTime", skip_serializing_if = "Option::is_none")]
    pub create_time: Option<i64>,
    #[serde(rename = "expireTime", skip_serializing_if = "Option::is_none")]
    pub expire_time: Option<i64>,
    #[serde(rename = "legs", skip_serializing_if = "Option::is_none")]
    pub legs: Option<Vec<models::CreateBlockOrderExecuteV1RespLegsInner>>,
    #[serde(rename = "liquidity", skip_serializing_if = "Option::is_none")]
    pub liquidity: Option<String>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

impl GetBlockOrderExecuteV1Resp {
    pub fn new() -> GetBlockOrderExecuteV1Resp {
        GetBlockOrderExecuteV1Resp {
            block_trade_settlement_key: None,
            create_time: None,
            expire_time: None,
            legs: None,
            liquidity: None,
            status: None,
        }
    }
}

