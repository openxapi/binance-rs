/*
 * Binance USD-M Futures API
 *
 * OpenAPI specification for Binance exchange - Umfutures API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::derivatives::umfutures::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UmfuturesGetSymbolConfigV1RespItem {
    #[serde(rename = "isAutoAddMargin", skip_serializing_if = "Option::is_none")]
    pub is_auto_add_margin: Option<String>,
    #[serde(rename = "leverage", skip_serializing_if = "Option::is_none")]
    pub leverage: Option<i32>,
    #[serde(rename = "marginType", skip_serializing_if = "Option::is_none")]
    pub margin_type: Option<String>,
    #[serde(rename = "maxNotionalValue", skip_serializing_if = "Option::is_none")]
    pub max_notional_value: Option<String>,
    #[serde(rename = "symbol", skip_serializing_if = "Option::is_none")]
    pub symbol: Option<String>,
}

impl UmfuturesGetSymbolConfigV1RespItem {
    pub fn new() -> UmfuturesGetSymbolConfigV1RespItem {
        UmfuturesGetSymbolConfigV1RespItem {
            is_auto_add_margin: None,
            leverage: None,
            margin_type: None,
            max_notional_value: None,
            symbol: None,
        }
    }
}

