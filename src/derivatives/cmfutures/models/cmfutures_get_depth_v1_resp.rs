/*
 * Binance COIN-M Futures API
 *
 * OpenAPI specification for Binance exchange - Cmfutures API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::derivatives::cmfutures::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CmfuturesGetDepthV1Resp {
    #[serde(rename = "E", skip_serializing_if = "Option::is_none")]
    pub e: Option<i32>,
    #[serde(rename = "T", skip_serializing_if = "Option::is_none")]
    pub t: Option<i32>,
    #[serde(rename = "asks", skip_serializing_if = "Option::is_none")]
    pub asks: Option<Vec<Vec<String>>>,
    #[serde(rename = "bids", skip_serializing_if = "Option::is_none")]
    pub bids: Option<Vec<Vec<String>>>,
    #[serde(rename = "lastUpdateId", skip_serializing_if = "Option::is_none")]
    pub last_update_id: Option<i64>,
    #[serde(rename = "pair", skip_serializing_if = "Option::is_none")]
    pub pair: Option<String>,
    #[serde(rename = "symbol", skip_serializing_if = "Option::is_none")]
    pub symbol: Option<String>,
}

impl CmfuturesGetDepthV1Resp {
    pub fn new() -> CmfuturesGetDepthV1Resp {
        CmfuturesGetDepthV1Resp {
            e: None,
            t: None,
            asks: None,
            bids: None,
            last_update_id: None,
            pair: None,
            symbol: None,
        }
    }
}

