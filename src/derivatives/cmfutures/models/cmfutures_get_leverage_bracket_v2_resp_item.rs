/*
 * Binance COIN-M Futures API
 *
 * OpenAPI specification for Binance exchange - Cmfutures API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::derivatives::cmfutures::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CmfuturesGetLeverageBracketV2RespItem {
    #[serde(rename = "brackets", skip_serializing_if = "Option::is_none")]
    pub brackets: Option<Vec<models::CmfuturesGetLeverageBracketV1RespItemBracketsInner>>,
    #[serde(rename = "notionalCoef", skip_serializing_if = "Option::is_none")]
    pub notional_coef: Option<f64>,
    #[serde(rename = "symbol", skip_serializing_if = "Option::is_none")]
    pub symbol: Option<String>,
}

impl CmfuturesGetLeverageBracketV2RespItem {
    pub fn new() -> CmfuturesGetLeverageBracketV2RespItem {
        CmfuturesGetLeverageBracketV2RespItem {
            brackets: None,
            notional_coef: None,
            symbol: None,
        }
    }
}

