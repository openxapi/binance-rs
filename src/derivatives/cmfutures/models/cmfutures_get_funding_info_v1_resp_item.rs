/*
 * Binance COIN-M Futures API
 *
 * OpenAPI specification for Binance exchange - Cmfutures API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::derivatives::cmfutures::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CmfuturesGetFundingInfoV1RespItem {
    #[serde(rename = "adjustedFundingRateCap", skip_serializing_if = "Option::is_none")]
    pub adjusted_funding_rate_cap: Option<String>,
    #[serde(rename = "adjustedFundingRateFloor", skip_serializing_if = "Option::is_none")]
    pub adjusted_funding_rate_floor: Option<String>,
    #[serde(rename = "disclaimer", skip_serializing_if = "Option::is_none")]
    pub disclaimer: Option<bool>,
    #[serde(rename = "fundingIntervalHours", skip_serializing_if = "Option::is_none")]
    pub funding_interval_hours: Option<i32>,
    #[serde(rename = "symbol", skip_serializing_if = "Option::is_none")]
    pub symbol: Option<String>,
}

impl CmfuturesGetFundingInfoV1RespItem {
    pub fn new() -> CmfuturesGetFundingInfoV1RespItem {
        CmfuturesGetFundingInfoV1RespItem {
            adjusted_funding_rate_cap: None,
            adjusted_funding_rate_floor: None,
            disclaimer: None,
            funding_interval_hours: None,
            symbol: None,
        }
    }
}

