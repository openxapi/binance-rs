/*
 * Binance Options API
 *
 * OpenAPI specification for Binance exchange - Options API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::derivatives::options::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OptionsGetAccountV1RespGreekInner {
    #[serde(rename = "delta", skip_serializing_if = "Option::is_none")]
    pub delta: Option<String>,
    #[serde(rename = "gamma", skip_serializing_if = "Option::is_none")]
    pub gamma: Option<String>,
    #[serde(rename = "theta", skip_serializing_if = "Option::is_none")]
    pub theta: Option<String>,
    #[serde(rename = "underlying", skip_serializing_if = "Option::is_none")]
    pub underlying: Option<String>,
    #[serde(rename = "vega", skip_serializing_if = "Option::is_none")]
    pub vega: Option<String>,
}

impl OptionsGetAccountV1RespGreekInner {
    pub fn new() -> OptionsGetAccountV1RespGreekInner {
        OptionsGetAccountV1RespGreekInner {
            delta: None,
            gamma: None,
            theta: None,
            underlying: None,
            vega: None,
        }
    }
}

