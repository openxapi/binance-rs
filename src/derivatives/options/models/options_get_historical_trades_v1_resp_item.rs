/*
 * Binance Options API
 *
 * OpenAPI specification for Binance exchange - Options API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::derivatives::options::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OptionsGetHistoricalTradesV1RespItem {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "price", skip_serializing_if = "Option::is_none")]
    pub price: Option<String>,
    #[serde(rename = "qty", skip_serializing_if = "Option::is_none")]
    pub qty: Option<String>,
    #[serde(rename = "quoteQty", skip_serializing_if = "Option::is_none")]
    pub quote_qty: Option<String>,
    #[serde(rename = "side", skip_serializing_if = "Option::is_none")]
    pub side: Option<i32>,
    #[serde(rename = "time", skip_serializing_if = "Option::is_none")]
    pub time: Option<i64>,
    #[serde(rename = "tradeId", skip_serializing_if = "Option::is_none")]
    pub trade_id: Option<String>,
}

impl OptionsGetHistoricalTradesV1RespItem {
    pub fn new() -> OptionsGetHistoricalTradesV1RespItem {
        OptionsGetHistoricalTradesV1RespItem {
            id: None,
            price: None,
            qty: None,
            quote_qty: None,
            side: None,
            time: None,
            trade_id: None,
        }
    }
}

