/*
 * Binance Portfolio Margin API
 *
 * OpenAPI specification for Binance exchange - Pmargin API
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::pmargin::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetMarginOpenOrdersV1RespItem {
    #[serde(rename = "accountId", skip_serializing_if = "Option::is_none")]
    pub account_id: Option<i64>,
    #[serde(rename = "clientOrderId", skip_serializing_if = "Option::is_none")]
    pub client_order_id: Option<String>,
    #[serde(rename = "cummulativeQuoteQty", skip_serializing_if = "Option::is_none")]
    pub cummulative_quote_qty: Option<String>,
    #[serde(rename = "executedQty", skip_serializing_if = "Option::is_none")]
    pub executed_qty: Option<String>,
    #[serde(rename = "icebergQty", skip_serializing_if = "Option::is_none")]
    pub iceberg_qty: Option<String>,
    #[serde(rename = "isWorking", skip_serializing_if = "Option::is_none")]
    pub is_working: Option<bool>,
    #[serde(rename = "orderId", skip_serializing_if = "Option::is_none")]
    pub order_id: Option<i64>,
    #[serde(rename = "origQty", skip_serializing_if = "Option::is_none")]
    pub orig_qty: Option<String>,
    #[serde(rename = "preventedMatchId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub prevented_match_id: Option<Option<serde_json::Value>>,
    #[serde(rename = "preventedQuantity", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub prevented_quantity: Option<Option<serde_json::Value>>,
    #[serde(rename = "price", skip_serializing_if = "Option::is_none")]
    pub price: Option<String>,
    #[serde(rename = "selfTradePreventionMode", skip_serializing_if = "Option::is_none")]
    pub self_trade_prevention_mode: Option<String>,
    #[serde(rename = "side", skip_serializing_if = "Option::is_none")]
    pub side: Option<String>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(rename = "stopPrice", skip_serializing_if = "Option::is_none")]
    pub stop_price: Option<String>,
    #[serde(rename = "symbol", skip_serializing_if = "Option::is_none")]
    pub symbol: Option<String>,
    #[serde(rename = "time", skip_serializing_if = "Option::is_none")]
    pub time: Option<i64>,
    #[serde(rename = "timeInForce", skip_serializing_if = "Option::is_none")]
    pub time_in_force: Option<String>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    #[serde(rename = "updateTime", skip_serializing_if = "Option::is_none")]
    pub update_time: Option<i64>,
}

impl GetMarginOpenOrdersV1RespItem {
    pub fn new() -> GetMarginOpenOrdersV1RespItem {
        GetMarginOpenOrdersV1RespItem {
            account_id: None,
            client_order_id: None,
            cummulative_quote_qty: None,
            executed_qty: None,
            iceberg_qty: None,
            is_working: None,
            order_id: None,
            orig_qty: None,
            prevented_match_id: None,
            prevented_quantity: None,
            price: None,
            self_trade_prevention_mode: None,
            side: None,
            status: None,
            stop_price: None,
            symbol: None,
            time: None,
            time_in_force: None,
            r#type: None,
            update_time: None,
        }
    }
}

