/*
 * Binance Portfolio Margin API
 *
 * OpenAPI specification for Binance exchange - Pmargin API
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::pmargin::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetCmConditionalOrderHistoryV1Resp {
    #[serde(rename = "activatePrice", skip_serializing_if = "Option::is_none")]
    pub activate_price: Option<String>,
    #[serde(rename = "bookTime", skip_serializing_if = "Option::is_none")]
    pub book_time: Option<i64>,
    #[serde(rename = "newClientStrategyId", skip_serializing_if = "Option::is_none")]
    pub new_client_strategy_id: Option<String>,
    #[serde(rename = "orderId", skip_serializing_if = "Option::is_none")]
    pub order_id: Option<i64>,
    #[serde(rename = "origQty", skip_serializing_if = "Option::is_none")]
    pub orig_qty: Option<String>,
    #[serde(rename = "positionSide", skip_serializing_if = "Option::is_none")]
    pub position_side: Option<String>,
    #[serde(rename = "price", skip_serializing_if = "Option::is_none")]
    pub price: Option<String>,
    #[serde(rename = "priceMatch", skip_serializing_if = "Option::is_none")]
    pub price_match: Option<String>,
    #[serde(rename = "priceProtect", skip_serializing_if = "Option::is_none")]
    pub price_protect: Option<bool>,
    #[serde(rename = "priceRate", skip_serializing_if = "Option::is_none")]
    pub price_rate: Option<String>,
    #[serde(rename = "reduceOnly", skip_serializing_if = "Option::is_none")]
    pub reduce_only: Option<bool>,
    #[serde(rename = "side", skip_serializing_if = "Option::is_none")]
    pub side: Option<String>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(rename = "stopPrice", skip_serializing_if = "Option::is_none")]
    pub stop_price: Option<String>,
    #[serde(rename = "strategyId", skip_serializing_if = "Option::is_none")]
    pub strategy_id: Option<i64>,
    #[serde(rename = "strategyStatus", skip_serializing_if = "Option::is_none")]
    pub strategy_status: Option<String>,
    #[serde(rename = "strategyType", skip_serializing_if = "Option::is_none")]
    pub strategy_type: Option<String>,
    #[serde(rename = "symbol", skip_serializing_if = "Option::is_none")]
    pub symbol: Option<String>,
    #[serde(rename = "timeInForce", skip_serializing_if = "Option::is_none")]
    pub time_in_force: Option<String>,
    #[serde(rename = "triggerTime", skip_serializing_if = "Option::is_none")]
    pub trigger_time: Option<i64>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    #[serde(rename = "updateTime", skip_serializing_if = "Option::is_none")]
    pub update_time: Option<i64>,
    #[serde(rename = "workingType", skip_serializing_if = "Option::is_none")]
    pub working_type: Option<String>,
}

impl GetCmConditionalOrderHistoryV1Resp {
    pub fn new() -> GetCmConditionalOrderHistoryV1Resp {
        GetCmConditionalOrderHistoryV1Resp {
            activate_price: None,
            book_time: None,
            new_client_strategy_id: None,
            order_id: None,
            orig_qty: None,
            position_side: None,
            price: None,
            price_match: None,
            price_protect: None,
            price_rate: None,
            reduce_only: None,
            side: None,
            status: None,
            stop_price: None,
            strategy_id: None,
            strategy_status: None,
            strategy_type: None,
            symbol: None,
            time_in_force: None,
            trigger_time: None,
            r#type: None,
            update_time: None,
            working_type: None,
        }
    }
}

