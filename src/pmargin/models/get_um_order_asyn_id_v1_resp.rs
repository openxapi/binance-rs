/*
 * Binance Portfolio Margin API
 *
 * OpenAPI specification for Binance exchange - Pmargin API
 *
 * The version of the OpenAPI document: 0.2.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::pmargin::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetUmOrderAsynIdV1Resp {
    #[serde(rename = "downloadId", skip_serializing_if = "Option::is_none")]
    pub download_id: Option<String>,
    #[serde(rename = "expirationTimestamp", skip_serializing_if = "Option::is_none")]
    pub expiration_timestamp: Option<i64>,
    #[serde(rename = "isExpired", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub is_expired: Option<Option<serde_json::Value>>,
    #[serde(rename = "notified", skip_serializing_if = "Option::is_none")]
    pub notified: Option<bool>,
    #[serde(rename = "s3Link", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub s3_link: Option<Option<serde_json::Value>>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

impl GetUmOrderAsynIdV1Resp {
    pub fn new() -> GetUmOrderAsynIdV1Resp {
        GetUmOrderAsynIdV1Resp {
            download_id: None,
            expiration_timestamp: None,
            is_expired: None,
            notified: None,
            s3_link: None,
            status: None,
            url: None,
        }
    }
}

