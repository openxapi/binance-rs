/*
 * Binance COIN-M Futures API
 *
 * OpenAPI specification for Binance exchange - Cmfutures API
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::cmfutures::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetTickerBookTickerV1RespItem {
    #[serde(rename = "askPrice", skip_serializing_if = "Option::is_none")]
    pub ask_price: Option<String>,
    #[serde(rename = "askQty", skip_serializing_if = "Option::is_none")]
    pub ask_qty: Option<String>,
    #[serde(rename = "bidPrice", skip_serializing_if = "Option::is_none")]
    pub bid_price: Option<String>,
    #[serde(rename = "bidQty", skip_serializing_if = "Option::is_none")]
    pub bid_qty: Option<String>,
    #[serde(rename = "lastUpdateId", skip_serializing_if = "Option::is_none")]
    pub last_update_id: Option<i64>,
    #[serde(rename = "pair", skip_serializing_if = "Option::is_none")]
    pub pair: Option<String>,
    #[serde(rename = "symbol", skip_serializing_if = "Option::is_none")]
    pub symbol: Option<String>,
    #[serde(rename = "time", skip_serializing_if = "Option::is_none")]
    pub time: Option<i64>,
}

impl GetTickerBookTickerV1RespItem {
    pub fn new() -> GetTickerBookTickerV1RespItem {
        GetTickerBookTickerV1RespItem {
            ask_price: None,
            ask_qty: None,
            bid_price: None,
            bid_qty: None,
            last_update_id: None,
            pair: None,
            symbol: None,
            time: None,
        }
    }
}

