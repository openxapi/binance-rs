/*
 * Binance COIN-M Futures API
 *
 * OpenAPI specification for Binance exchange - Cmfutures API
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::cmfutures::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetTradesV1RespItem {
    #[serde(rename = "baseQty", skip_serializing_if = "Option::is_none")]
    pub base_qty: Option<String>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "isBuyerMaker", skip_serializing_if = "Option::is_none")]
    pub is_buyer_maker: Option<bool>,
    #[serde(rename = "price", skip_serializing_if = "Option::is_none")]
    pub price: Option<String>,
    #[serde(rename = "qty", skip_serializing_if = "Option::is_none")]
    pub qty: Option<String>,
    #[serde(rename = "time", skip_serializing_if = "Option::is_none")]
    pub time: Option<i64>,
}

impl GetTradesV1RespItem {
    pub fn new() -> GetTradesV1RespItem {
        GetTradesV1RespItem {
            base_qty: None,
            id: None,
            is_buyer_maker: None,
            price: None,
            qty: None,
            time: None,
        }
    }
}

