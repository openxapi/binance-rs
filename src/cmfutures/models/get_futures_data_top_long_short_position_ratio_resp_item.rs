/*
 * Binance COIN-M Futures API
 *
 * OpenAPI specification for Binance exchange - Cmfutures API
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::cmfutures::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetFuturesDataTopLongShortPositionRatioRespItem {
    #[serde(rename = "longPosition", skip_serializing_if = "Option::is_none")]
    pub long_position: Option<String>,
    #[serde(rename = "longShortRatio", skip_serializing_if = "Option::is_none")]
    pub long_short_ratio: Option<String>,
    #[serde(rename = "pair", skip_serializing_if = "Option::is_none")]
    pub pair: Option<String>,
    #[serde(rename = "shortPosition", skip_serializing_if = "Option::is_none")]
    pub short_position: Option<String>,
    #[serde(rename = "timestamp", skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<i64>,
}

impl GetFuturesDataTopLongShortPositionRatioRespItem {
    pub fn new() -> GetFuturesDataTopLongShortPositionRatioRespItem {
        GetFuturesDataTopLongShortPositionRatioRespItem {
            long_position: None,
            long_short_ratio: None,
            pair: None,
            short_position: None,
            timestamp: None,
        }
    }
}

