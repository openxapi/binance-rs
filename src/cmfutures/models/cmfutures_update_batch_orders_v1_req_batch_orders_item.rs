/*
 * Binance COIN-M Futures API
 *
 * OpenAPI specification for Binance exchange - Cmfutures API
 *
 * The version of the OpenAPI document: 0.2.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::cmfutures::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem {
    #[serde(rename = "orderId", skip_serializing_if = "Option::is_none")]
    pub order_id: Option<i64>,
    #[serde(rename = "origClientOrderId", skip_serializing_if = "Option::is_none")]
    pub orig_client_order_id: Option<String>,
    #[serde(rename = "price", skip_serializing_if = "Option::is_none")]
    pub price: Option<String>,
    #[serde(rename = "quantity", skip_serializing_if = "Option::is_none")]
    pub quantity: Option<String>,
    #[serde(rename = "recvWindow", skip_serializing_if = "Option::is_none")]
    pub recv_window: Option<i64>,
    #[serde(rename = "side")]
    pub side: String,
    #[serde(rename = "symbol")]
    pub symbol: String,
    #[serde(rename = "timestamp")]
    pub timestamp: i64,
}

impl CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem {
    pub fn new(side: String, symbol: String, timestamp: i64) -> CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem {
        CmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem {
            order_id: None,
            orig_client_order_id: None,
            price: None,
            quantity: None,
            recv_window: None,
            side,
            symbol,
            timestamp,
        }
    }
}

