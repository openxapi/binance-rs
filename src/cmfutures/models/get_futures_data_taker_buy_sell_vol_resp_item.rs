/*
 * Binance COIN-M Futures API
 *
 * OpenAPI specification for Binance exchange - Cmfutures API
 *
 * The version of the OpenAPI document: 0.2.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::cmfutures::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetFuturesDataTakerBuySellVolRespItem {
    #[serde(rename = "contractType", skip_serializing_if = "Option::is_none")]
    pub contract_type: Option<String>,
    #[serde(rename = "pair", skip_serializing_if = "Option::is_none")]
    pub pair: Option<String>,
    #[serde(rename = "takerBuyVol", skip_serializing_if = "Option::is_none")]
    pub taker_buy_vol: Option<String>,
    #[serde(rename = "takerBuyVolValue", skip_serializing_if = "Option::is_none")]
    pub taker_buy_vol_value: Option<String>,
    #[serde(rename = "takerSellVol", skip_serializing_if = "Option::is_none")]
    pub taker_sell_vol: Option<String>,
    #[serde(rename = "takerSellVolValue", skip_serializing_if = "Option::is_none")]
    pub taker_sell_vol_value: Option<String>,
    #[serde(rename = "timestamp", skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<i64>,
}

impl GetFuturesDataTakerBuySellVolRespItem {
    pub fn new() -> GetFuturesDataTakerBuySellVolRespItem {
        GetFuturesDataTakerBuySellVolRespItem {
            contract_type: None,
            pair: None,
            taker_buy_vol: None,
            taker_buy_vol_value: None,
            taker_sell_vol: None,
            taker_sell_vol_value: None,
            timestamp: None,
        }
    }
}

