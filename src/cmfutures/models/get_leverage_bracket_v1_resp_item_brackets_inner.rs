/*
 * Binance COIN-M Futures API
 *
 * OpenAPI specification for Binance exchange - Cmfutures API
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::cmfutures::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetLeverageBracketV1RespItemBracketsInner {
    #[serde(rename = "bracket", skip_serializing_if = "Option::is_none")]
    pub bracket: Option<i32>,
    #[serde(rename = "cum", skip_serializing_if = "Option::is_none")]
    pub cum: Option<i32>,
    #[serde(rename = "initialLeverage", skip_serializing_if = "Option::is_none")]
    pub initial_leverage: Option<i32>,
    #[serde(rename = "maintMarginRatio", skip_serializing_if = "Option::is_none")]
    pub maint_margin_ratio: Option<f64>,
    #[serde(rename = "qtyCap", skip_serializing_if = "Option::is_none")]
    pub qty_cap: Option<i32>,
    #[serde(rename = "qtylFloor", skip_serializing_if = "Option::is_none")]
    pub qtyl_floor: Option<i32>,
}

impl GetLeverageBracketV1RespItemBracketsInner {
    pub fn new() -> GetLeverageBracketV1RespItemBracketsInner {
        GetLeverageBracketV1RespItemBracketsInner {
            bracket: None,
            cum: None,
            initial_leverage: None,
            maint_margin_ratio: None,
            qty_cap: None,
            qtyl_floor: None,
        }
    }
}

