/*
 * Binance Convert API
 *
 * OpenAPI specification for Binance exchange - Convert API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::convert::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConvertCreateConvertLimitPlaceOrderV1Resp {
    #[serde(rename = "fromAmount", skip_serializing_if = "Option::is_none")]
    pub from_amount: Option<String>,
    #[serde(rename = "inverseRatio", skip_serializing_if = "Option::is_none")]
    pub inverse_ratio: Option<String>,
    #[serde(rename = "quoteId", skip_serializing_if = "Option::is_none")]
    pub quote_id: Option<String>,
    #[serde(rename = "ratio", skip_serializing_if = "Option::is_none")]
    pub ratio: Option<String>,
    #[serde(rename = "toAmount", skip_serializing_if = "Option::is_none")]
    pub to_amount: Option<String>,
    #[serde(rename = "validTimestamp", skip_serializing_if = "Option::is_none")]
    pub valid_timestamp: Option<i64>,
}

impl ConvertCreateConvertLimitPlaceOrderV1Resp {
    pub fn new() -> ConvertCreateConvertLimitPlaceOrderV1Resp {
        ConvertCreateConvertLimitPlaceOrderV1Resp {
            from_amount: None,
            inverse_ratio: None,
            quote_id: None,
            ratio: None,
            to_amount: None,
            valid_timestamp: None,
        }
    }
}

