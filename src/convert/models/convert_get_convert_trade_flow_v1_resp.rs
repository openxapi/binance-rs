/*
 * Binance Convert API
 *
 * OpenAPI specification for Binance exchange - Convert API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::convert::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConvertGetConvertTradeFlowV1Resp {
    #[serde(rename = "endTime", skip_serializing_if = "Option::is_none")]
    pub end_time: Option<i64>,
    #[serde(rename = "limit", skip_serializing_if = "Option::is_none")]
    pub limit: Option<i32>,
    #[serde(rename = "list", skip_serializing_if = "Option::is_none")]
    pub list: Option<Vec<models::ConvertGetConvertTradeFlowV1RespListInner>>,
    #[serde(rename = "moreData", skip_serializing_if = "Option::is_none")]
    pub more_data: Option<bool>,
    #[serde(rename = "startTime", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<i64>,
}

impl ConvertGetConvertTradeFlowV1Resp {
    pub fn new() -> ConvertGetConvertTradeFlowV1Resp {
        ConvertGetConvertTradeFlowV1Resp {
            end_time: None,
            limit: None,
            list: None,
            more_data: None,
            start_time: None,
        }
    }
}

