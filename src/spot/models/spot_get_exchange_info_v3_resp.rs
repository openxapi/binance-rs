/*
 * Binance Spot API
 *
 * OpenAPI specification for Binance exchange - Spot API
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::spot::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SpotGetExchangeInfoV3Resp {
    #[serde(rename = "exchangeFilters", skip_serializing_if = "Option::is_none")]
    pub exchange_filters: Option<Vec<models::SpotGetExchangeInfoV3RespExchangeFiltersInner>>,
    #[serde(rename = "rateLimits", skip_serializing_if = "Option::is_none")]
    pub rate_limits: Option<Vec<models::SpotRateLimit>>,
    #[serde(rename = "serverTime", skip_serializing_if = "Option::is_none")]
    pub server_time: Option<i64>,
    #[serde(rename = "sors", skip_serializing_if = "Option::is_none")]
    pub sors: Option<Vec<models::SpotGetExchangeInfoV3RespSorsInner>>,
    #[serde(rename = "symbols", skip_serializing_if = "Option::is_none")]
    pub symbols: Option<Vec<models::SpotGetExchangeInfoV3RespSymbolsInner>>,
    #[serde(rename = "timezone", skip_serializing_if = "Option::is_none")]
    pub timezone: Option<String>,
}

impl SpotGetExchangeInfoV3Resp {
    pub fn new() -> SpotGetExchangeInfoV3Resp {
        SpotGetExchangeInfoV3Resp {
            exchange_filters: None,
            rate_limits: None,
            server_time: None,
            sors: None,
            symbols: None,
            timezone: None,
        }
    }
}

