/*
 * Binance Spot API
 *
 * OpenAPI specification for Binance exchange - Spot API
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::spot::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetManagedSubaccountMarginAssetV1RespUserAssetsInner {
    #[serde(rename = "asset", skip_serializing_if = "Option::is_none")]
    pub asset: Option<String>,
    #[serde(rename = "borrowed", skip_serializing_if = "Option::is_none")]
    pub borrowed: Option<String>,
    #[serde(rename = "free", skip_serializing_if = "Option::is_none")]
    pub free: Option<String>,
    #[serde(rename = "interest", skip_serializing_if = "Option::is_none")]
    pub interest: Option<String>,
    #[serde(rename = "locked", skip_serializing_if = "Option::is_none")]
    pub locked: Option<String>,
    #[serde(rename = "netAsset", skip_serializing_if = "Option::is_none")]
    pub net_asset: Option<String>,
}

impl GetManagedSubaccountMarginAssetV1RespUserAssetsInner {
    pub fn new() -> GetManagedSubaccountMarginAssetV1RespUserAssetsInner {
        GetManagedSubaccountMarginAssetV1RespUserAssetsInner {
            asset: None,
            borrowed: None,
            free: None,
            interest: None,
            locked: None,
            net_asset: None,
        }
    }
}

