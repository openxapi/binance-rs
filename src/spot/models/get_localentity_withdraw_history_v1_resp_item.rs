/*
 * Binance Spot API
 *
 * OpenAPI specification for Binance exchange - Spot API
 *
 * The version of the OpenAPI document: 0.2.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::spot::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetLocalentityWithdrawHistoryV1RespItem {
    #[serde(rename = "address", skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(rename = "addressTag", skip_serializing_if = "Option::is_none")]
    pub address_tag: Option<String>,
    #[serde(rename = "amount", skip_serializing_if = "Option::is_none")]
    pub amount: Option<String>,
    #[serde(rename = "applyTime", skip_serializing_if = "Option::is_none")]
    pub apply_time: Option<String>,
    #[serde(rename = "coin", skip_serializing_if = "Option::is_none")]
    pub coin: Option<String>,
    #[serde(rename = "completeTime", skip_serializing_if = "Option::is_none")]
    pub complete_time: Option<String>,
    #[serde(rename = "confirmNo", skip_serializing_if = "Option::is_none")]
    pub confirm_no: Option<i32>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "info", skip_serializing_if = "Option::is_none")]
    pub info: Option<String>,
    #[serde(rename = "network", skip_serializing_if = "Option::is_none")]
    pub network: Option<String>,
    #[serde(rename = "questionnaire", skip_serializing_if = "Option::is_none")]
    pub questionnaire: Option<String>,
    #[serde(rename = "trId", skip_serializing_if = "Option::is_none")]
    pub tr_id: Option<i64>,
    #[serde(rename = "transactionFee", skip_serializing_if = "Option::is_none")]
    pub transaction_fee: Option<String>,
    #[serde(rename = "transferType", skip_serializing_if = "Option::is_none")]
    pub transfer_type: Option<i32>,
    #[serde(rename = "travelRuleStatus", skip_serializing_if = "Option::is_none")]
    pub travel_rule_status: Option<i32>,
    #[serde(rename = "txId", skip_serializing_if = "Option::is_none")]
    pub tx_id: Option<String>,
    #[serde(rename = "txKey", skip_serializing_if = "Option::is_none")]
    pub tx_key: Option<String>,
    #[serde(rename = "walletType", skip_serializing_if = "Option::is_none")]
    pub wallet_type: Option<i32>,
    #[serde(rename = "withdrawOrderId", skip_serializing_if = "Option::is_none")]
    pub withdraw_order_id: Option<String>,
    #[serde(rename = "withdrawalStatus", skip_serializing_if = "Option::is_none")]
    pub withdrawal_status: Option<i32>,
}

impl GetLocalentityWithdrawHistoryV1RespItem {
    pub fn new() -> GetLocalentityWithdrawHistoryV1RespItem {
        GetLocalentityWithdrawHistoryV1RespItem {
            address: None,
            address_tag: None,
            amount: None,
            apply_time: None,
            coin: None,
            complete_time: None,
            confirm_no: None,
            id: None,
            info: None,
            network: None,
            questionnaire: None,
            tr_id: None,
            transaction_fee: None,
            transfer_type: None,
            travel_rule_status: None,
            tx_id: None,
            tx_key: None,
            wallet_type: None,
            withdraw_order_id: None,
            withdrawal_status: None,
        }
    }
}

