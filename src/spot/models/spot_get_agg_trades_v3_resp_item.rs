/*
 * Binance Spot API
 *
 * OpenAPI specification for Binance exchange - Spot API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::spot::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SpotGetAggTradesV3RespItem {
    #[serde(rename = "M", skip_serializing_if = "Option::is_none")]
    pub is_best_match: Option<bool>,
    #[serde(rename = "T", skip_serializing_if = "Option::is_none")]
    pub t: Option<i64>,
    #[serde(rename = "a", skip_serializing_if = "Option::is_none")]
    pub a: Option<i64>,
    #[serde(rename = "f", skip_serializing_if = "Option::is_none")]
    pub f: Option<i64>,
    #[serde(rename = "l", skip_serializing_if = "Option::is_none")]
    pub l: Option<i64>,
    #[serde(rename = "m", skip_serializing_if = "Option::is_none")]
    pub m: Option<bool>,
    #[serde(rename = "p", skip_serializing_if = "Option::is_none")]
    pub p: Option<String>,
    #[serde(rename = "q", skip_serializing_if = "Option::is_none")]
    pub q: Option<String>,
}

impl SpotGetAggTradesV3RespItem {
    pub fn new() -> SpotGetAggTradesV3RespItem {
        SpotGetAggTradesV3RespItem {
            is_best_match: None,
            t: None,
            a: None,
            f: None,
            l: None,
            m: None,
            p: None,
            q: None,
        }
    }
}

