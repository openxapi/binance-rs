/*
 * Binance Spot API
 *
 * OpenAPI specification for Binance exchange - Spot API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SpotGetMyPreventedMatchesV3RespItem {
    #[serde(rename = "makerOrderId", skip_serializing_if = "Option::is_none")]
    pub maker_order_id: Option<i64>,
    #[serde(rename = "makerPreventedQuantity", skip_serializing_if = "Option::is_none")]
    pub maker_prevented_quantity: Option<String>,
    #[serde(rename = "makerSymbol", skip_serializing_if = "Option::is_none")]
    pub maker_symbol: Option<String>,
    #[serde(rename = "preventedMatchId", skip_serializing_if = "Option::is_none")]
    pub prevented_match_id: Option<i64>,
    #[serde(rename = "price", skip_serializing_if = "Option::is_none")]
    pub price: Option<String>,
    #[serde(rename = "selfTradePreventionMode", skip_serializing_if = "Option::is_none")]
    pub self_trade_prevention_mode: Option<String>,
    #[serde(rename = "symbol", skip_serializing_if = "Option::is_none")]
    pub symbol: Option<String>,
    #[serde(rename = "takerOrderId", skip_serializing_if = "Option::is_none")]
    pub taker_order_id: Option<i64>,
    #[serde(rename = "tradeGroupId", skip_serializing_if = "Option::is_none")]
    pub trade_group_id: Option<i64>,
    #[serde(rename = "transactTime", skip_serializing_if = "Option::is_none")]
    pub transact_time: Option<i64>,
}

impl SpotGetMyPreventedMatchesV3RespItem {
    pub fn new() -> SpotGetMyPreventedMatchesV3RespItem {
        SpotGetMyPreventedMatchesV3RespItem {
            maker_order_id: None,
            maker_prevented_quantity: None,
            maker_symbol: None,
            prevented_match_id: None,
            price: None,
            self_trade_prevention_mode: None,
            symbol: None,
            taker_order_id: None,
            trade_group_id: None,
            transact_time: None,
        }
    }
}

