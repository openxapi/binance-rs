/*
 * Binance Spot API
 *
 * OpenAPI specification for Binance exchange - Spot API
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::spot::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetMiningStatisticsUserStatusV1RespData {
    #[serde(rename = "algo", skip_serializing_if = "Option::is_none")]
    pub algo: Option<String>,
    #[serde(rename = "dayHashRate", skip_serializing_if = "Option::is_none")]
    pub day_hash_rate: Option<String>,
    #[serde(rename = "fifteenMinHashRate", skip_serializing_if = "Option::is_none")]
    pub fifteen_min_hash_rate: Option<String>,
    #[serde(rename = "invalidNum", skip_serializing_if = "Option::is_none")]
    pub invalid_num: Option<i32>,
    #[serde(rename = "profitToday", skip_serializing_if = "Option::is_none")]
    pub profit_today: Option<Box<models::GetMiningStatisticsUserStatusV1RespDataProfitToday>>,
    #[serde(rename = "profitYesterday", skip_serializing_if = "Option::is_none")]
    pub profit_yesterday: Option<Box<models::GetMiningStatisticsUserStatusV1RespDataProfitToday>>,
    #[serde(rename = "unit", skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
    #[serde(rename = "userName", skip_serializing_if = "Option::is_none")]
    pub user_name: Option<String>,
    #[serde(rename = "validNum", skip_serializing_if = "Option::is_none")]
    pub valid_num: Option<i32>,
}

impl GetMiningStatisticsUserStatusV1RespData {
    pub fn new() -> GetMiningStatisticsUserStatusV1RespData {
        GetMiningStatisticsUserStatusV1RespData {
            algo: None,
            day_hash_rate: None,
            fifteen_min_hash_rate: None,
            invalid_num: None,
            profit_today: None,
            profit_yesterday: None,
            unit: None,
            user_name: None,
            valid_num: None,
        }
    }
}

