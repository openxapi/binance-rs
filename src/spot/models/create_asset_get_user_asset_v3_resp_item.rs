/*
 * Binance Spot API
 *
 * OpenAPI specification for Binance exchange - Spot API
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::spot::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateAssetGetUserAssetV3RespItem {
    #[serde(rename = "asset", skip_serializing_if = "Option::is_none")]
    pub asset: Option<String>,
    #[serde(rename = "btcValuation", skip_serializing_if = "Option::is_none")]
    pub btc_valuation: Option<String>,
    #[serde(rename = "free", skip_serializing_if = "Option::is_none")]
    pub free: Option<String>,
    #[serde(rename = "freeze", skip_serializing_if = "Option::is_none")]
    pub freeze: Option<String>,
    #[serde(rename = "ipoable", skip_serializing_if = "Option::is_none")]
    pub ipoable: Option<String>,
    #[serde(rename = "locked", skip_serializing_if = "Option::is_none")]
    pub locked: Option<String>,
    #[serde(rename = "withdrawing", skip_serializing_if = "Option::is_none")]
    pub withdrawing: Option<String>,
}

impl CreateAssetGetUserAssetV3RespItem {
    pub fn new() -> CreateAssetGetUserAssetV3RespItem {
        CreateAssetGetUserAssetV3RespItem {
            asset: None,
            btc_valuation: None,
            free: None,
            freeze: None,
            ipoable: None,
            locked: None,
            withdrawing: None,
        }
    }
}

