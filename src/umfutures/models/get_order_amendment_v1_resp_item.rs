/*
 * Binance USD-M Futures API
 *
 * OpenAPI specification for Binance exchange - Umfutures API
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::umfutures::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetOrderAmendmentV1RespItem {
    #[serde(rename = "amendment", skip_serializing_if = "Option::is_none")]
    pub amendment: Option<Box<models::GetOrderAmendmentV1RespItemAmendment>>,
    #[serde(rename = "amendmentId", skip_serializing_if = "Option::is_none")]
    pub amendment_id: Option<i64>,
    #[serde(rename = "clientOrderId", skip_serializing_if = "Option::is_none")]
    pub client_order_id: Option<String>,
    #[serde(rename = "orderId", skip_serializing_if = "Option::is_none")]
    pub order_id: Option<i64>,
    #[serde(rename = "pair", skip_serializing_if = "Option::is_none")]
    pub pair: Option<String>,
    #[serde(rename = "symbol", skip_serializing_if = "Option::is_none")]
    pub symbol: Option<String>,
    #[serde(rename = "time", skip_serializing_if = "Option::is_none")]
    pub time: Option<i64>,
}

impl GetOrderAmendmentV1RespItem {
    pub fn new() -> GetOrderAmendmentV1RespItem {
        GetOrderAmendmentV1RespItem {
            amendment: None,
            amendment_id: None,
            client_order_id: None,
            order_id: None,
            pair: None,
            symbol: None,
            time: None,
        }
    }
}

