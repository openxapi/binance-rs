/*
 * Binance USD-M Futures API
 *
 * OpenAPI specification for Binance exchange - Umfutures API
 *
 * The version of the OpenAPI document: 0.2.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::umfutures::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UmfuturesGetExchangeInfoV1Resp {
    #[serde(rename = "assets", skip_serializing_if = "Option::is_none")]
    pub assets: Option<Vec<models::UmfuturesGetExchangeInfoV1RespAssetsInner>>,
    #[serde(rename = "exchangeFilters", skip_serializing_if = "Option::is_none")]
    pub exchange_filters: Option<Vec<String>>,
    #[serde(rename = "rateLimits", skip_serializing_if = "Option::is_none")]
    pub rate_limits: Option<Vec<models::UmfuturesGetExchangeInfoV1RespRateLimitsInner>>,
    #[serde(rename = "serverTime", skip_serializing_if = "Option::is_none")]
    pub server_time: Option<i32>,
    #[serde(rename = "symbols", skip_serializing_if = "Option::is_none")]
    pub symbols: Option<Vec<models::UmfuturesGetExchangeInfoV1RespSymbolsInner>>,
    #[serde(rename = "timezone", skip_serializing_if = "Option::is_none")]
    pub timezone: Option<String>,
}

impl UmfuturesGetExchangeInfoV1Resp {
    pub fn new() -> UmfuturesGetExchangeInfoV1Resp {
        UmfuturesGetExchangeInfoV1Resp {
            assets: None,
            exchange_filters: None,
            rate_limits: None,
            server_time: None,
            symbols: None,
            timezone: None,
        }
    }
}

