/*
 * Binance USD-M Futures API
 *
 * OpenAPI specification for Binance exchange - Umfutures API
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::umfutures::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem {
    #[serde(rename = "orderId", skip_serializing_if = "Option::is_none")]
    pub order_id: Option<i64>,
    #[serde(rename = "origClientOrderId", skip_serializing_if = "Option::is_none")]
    pub orig_client_order_id: Option<String>,
    #[serde(rename = "price")]
    pub price: String,
    #[serde(rename = "priceMatch", skip_serializing_if = "Option::is_none")]
    pub price_match: Option<String>,
    #[serde(rename = "quantity")]
    pub quantity: String,
    #[serde(rename = "side")]
    pub side: String,
    #[serde(rename = "symbol")]
    pub symbol: String,
}

impl UmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem {
    pub fn new(price: String, quantity: String, side: String, symbol: String) -> UmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem {
        UmfuturesUpdateBatchOrdersV1ReqBatchOrdersItem {
            order_id: None,
            orig_client_order_id: None,
            price,
            price_match: None,
            quantity,
            side,
            symbol,
        }
    }
}

