/*
 * Binance USD-M Futures API
 *
 * OpenAPI specification for Binance exchange - Umfutures API
 *
 * The version of the OpenAPI document: 0.2.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::umfutures::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetAccountV2RespPositionsInner {
    #[serde(rename = "askNotional", skip_serializing_if = "Option::is_none")]
    pub ask_notional: Option<String>,
    #[serde(rename = "bidNotional", skip_serializing_if = "Option::is_none")]
    pub bid_notional: Option<String>,
    #[serde(rename = "entryPrice", skip_serializing_if = "Option::is_none")]
    pub entry_price: Option<String>,
    #[serde(rename = "initialMargin", skip_serializing_if = "Option::is_none")]
    pub initial_margin: Option<String>,
    #[serde(rename = "isolated", skip_serializing_if = "Option::is_none")]
    pub isolated: Option<bool>,
    #[serde(rename = "leverage", skip_serializing_if = "Option::is_none")]
    pub leverage: Option<String>,
    #[serde(rename = "maintMargin", skip_serializing_if = "Option::is_none")]
    pub maint_margin: Option<String>,
    #[serde(rename = "maxNotional", skip_serializing_if = "Option::is_none")]
    pub max_notional: Option<String>,
    #[serde(rename = "openOrderInitialMargin", skip_serializing_if = "Option::is_none")]
    pub open_order_initial_margin: Option<String>,
    #[serde(rename = "positionAmt", skip_serializing_if = "Option::is_none")]
    pub position_amt: Option<String>,
    #[serde(rename = "positionInitialMargin", skip_serializing_if = "Option::is_none")]
    pub position_initial_margin: Option<String>,
    #[serde(rename = "positionSide", skip_serializing_if = "Option::is_none")]
    pub position_side: Option<String>,
    #[serde(rename = "symbol", skip_serializing_if = "Option::is_none")]
    pub symbol: Option<String>,
    #[serde(rename = "unrealizedProfit", skip_serializing_if = "Option::is_none")]
    pub unrealized_profit: Option<String>,
    #[serde(rename = "updateTime", skip_serializing_if = "Option::is_none")]
    pub update_time: Option<i64>,
}

impl GetAccountV2RespPositionsInner {
    pub fn new() -> GetAccountV2RespPositionsInner {
        GetAccountV2RespPositionsInner {
            ask_notional: None,
            bid_notional: None,
            entry_price: None,
            initial_margin: None,
            isolated: None,
            leverage: None,
            maint_margin: None,
            max_notional: None,
            open_order_initial_margin: None,
            position_amt: None,
            position_initial_margin: None,
            position_side: None,
            symbol: None,
            unrealized_profit: None,
            update_time: None,
        }
    }
}

